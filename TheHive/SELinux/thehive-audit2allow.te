policy_module(thehive,1.0.0)

### Import
require {
        type proc_net_t;
        type cslistener_port_t;
        type net_conf_t;
        type sysctl_vm_t;
        type user_runtime_t;
        type autofs_t;
        type var_lock_t;
        type sysfs_t;
        type home_root_t;
        type tmp_t;
        type ntpd_t;
        type urandom_device_t;
        type sysctl_net_t;
        type system_cronjob_t;
        type init_t;
        type fixed_disk_device_t;
        type hugetlbfs_t;
        type ldconfig_exec_t;
        type local_login_t;
        type sshd_t;
        type user_home_dir_t;
        type http_port_t;
        type var_log_t;
        type usr_t;
        type var_run_t;
        type shell_exec_t;
        type java_exec_t;
        type sysctl_vm_overcommit_t;
        type exim_t;
        type system_mail_t;
        type semanage_tmp_t;
        type locale_t;
        type pstore_t;
        type tmpfs_t;
        type sysctl_fs_t;
        type debugfs_t;
        type unconfined_t;
        type node_t;
        type random_device_t;
        type sysctl_t;
        type cert_t;
        type v4l_device_t;
        type user_runtime_root_t;
        type systemd_logind_t;
        type var_lib_t;
        type thehive_t;
        type bin_t;
        type unreserved_port_t;
        type semanage_t;
        type dpkg_var_lib_t;
        class sock_file unlink;
        class chr_file { getattr open read };
        class lnk_file read;
        class file { create execute execute_no_trans getattr open read rename unlink write };
        class udp_socket { create ioctl };
        class key { search write };
}

########################################
#
# Declarations
#

type thehive_t;
type thehive_exec_t;
domain_type(thehive_t)
init_daemon_domain(thehive_t, thehive_exec_t)

### pid files
type thehive_var_run_t;
files_pid_file(thehive_var_run_t)

### log files
type thehive_var_log_t;

# Enable generic log permissions to The Hive logging
logging_log_file(thehive_var_log_t)

### var/lib files
type thehive_var_lib_t;
files_type(thehive_var_lib_t)

########################################
#
# thehive local policy
#
# Check in /etc/selinux/refpolicy/include for macros to use instead of allow rules.
# The allow directive is the base directive used to authorize an operation. The first 
# parameter is the process domain which is allowed to execute the operation. The 
# second one defines the object that a process of the former domain can manipulate. 
# This parameter is of the form “type:class“ where type is its SELinux type and class 
# describes the nature of the object (file, directory, socket, fifo, etc.). Finally, 
# the last parameter describes the permissions (the allowed operations).
# Used macro's can be found at /usr/share/selinux/devel/include/support/*
# Source: https://debian-handbook.info/browse/stable/sect.selinux.html


### Some common macros (you might be able to remove some)
files_read_etc_files(thehive_t)
libs_use_ld_so(thehive_t)
libs_use_shared_libs(thehive_t)
#miscfiles_read_localization(thehive_t)

### internal communication is often done using fifo and unix sockets.
allow thehive_t self:fifo_file { read write };
allow thehive_t self:unix_stream_socket create_stream_socket_perms;

### pid file
allow thehive_t thehive_var_run_t:file manage_file_perms;
allow thehive_t thehive_var_run_t:sock_file manage_file_perms;
allow thehive_t thehive_var_run_t:dir rw_dir_perms;
files_pid_filetrans(thehive_t,thehive_var_run_t, { file sock_file })

### log files
allow thehive_t thehive_var_log_t:file create_file_perms;
allow thehive_t thehive_var_log_t:sock_file create_file_perms;
allow thehive_t thehive_var_log_t:dir { rw_dir_perms setattr };
logging_log_filetrans(thehive_t,thehive_var_log_t,{ sock_file file dir })

# var/lib files for thehive
allow thehive_t thehive_var_lib_t:file create_file_perms;
allow thehive_t thehive_var_lib_t:sock_file create_file_perms;
allow thehive_t thehive_var_lib_t:dir create_dir_perms;
files_var_lib_filetrans(thehive_t,thehive_var_lib_t, { file dir sock_file })

## Networking basics (adjust to your needs!)
#sysnet_dns_name_resolve(thehive_t)
#corenet_tcp_sendrecv_all_if(thehive_t)
#corenet_tcp_sendrecv_all_nodes(thehive_t)
#corenet_tcp_sendrecv_all_ports(thehive_t)
#corenet_non_ipsec_sendrecv(thehive_t)
## if it is a network daemon, consider these:
#corenet_tcp_bind_all_ports(thehive_t)
#corenet_tcp_bind_all_nodes(thehive_t)

### Allow TheHive to connect to Cortex
#corenet_tcp_connect_http_port(thehive_t)
#corenet_tcp_connect_all_ports(thehive_t)

### Allow to open port 9000
#Internet nodejs example
#allow thehive_t self:tcp_socket { create_stream_socket_perms name_bind };
#Policygentool
allow thehive_t self:tcp_socket { listen accept };

# Init script handling
init_use_fds(thehive_t)
init_use_script_ptys(thehive_t)
domain_use_interactive_fds(thehive_t)

#Audit2allow generated rules, need to check

#All required getattr permissions
allow thehive_t autofs_t:dir getattr;
allow thehive_t bin_t:dir getattr;
allow thehive_t debugfs_t:dir getattr;
allow thehive_t home_root_t:dir getattr;
allow thehive_t hugetlbfs_t:dir getattr;
allow thehive_t pstore_t:dir getattr;
allow thehive_t sysctl_t:dir getattr;
allow thehive_t tmpfs_t:dir getattr;
allow thehive_t var_lock_t:dir getattr;
allow thehive_t fixed_disk_device_t:blk_file getattr;


#Allow The Hive 
#allow thehive_t bin_t:file { execute execute_no_trans getattr open read };
#allow thehive_t bin_t:lnk_file read;

#allow thehive_t cslistener_port_t:tcp_socket name_bind;

#allow thehive_t java_exec_t:file { execute execute_no_trans getattr open read };

#allow thehive_t locale_t:file { getattr open read };
#allow thehive_t locale_t:lnk_file read;

#allow thehive_t net_conf_t:file { getattr open read };

#allow thehive_t node_t:tcp_socket node_bind;

allow thehive_t proc_net_t:file { getattr open read };

allow thehive_t random_device_t:chr_file { getattr open read };

allow thehive_t self:fifo_file { getattr ioctl };
allow thehive_t self:process { execmem getsched };
allow thehive_t self:tcp_socket { bind connect create getattr getopt read setopt write };
allow thehive_t self:udp_socket { create ioctl };

allow thehive_t shell_exec_t:file { execute execute_no_trans getattr open read };

allow thehive_t sysctl_fs_t:dir { getattr search };

allow thehive_t sysctl_net_t:dir search;
allow thehive_t sysctl_net_t:file { getattr open read };

allow thehive_t sysctl_vm_overcommit_t:file { open read };

allow thehive_t sysctl_vm_t:dir search;

allow thehive_t sysfs_t:dir read;
allow thehive_t sysfs_t:file { open read };
allow thehive_t sysfs_t:lnk_file read;

allow thehive_t tmp_t:dir { add_name create read remove_name write };
allow thehive_t tmp_t:file { create getattr open read unlink write };

allow thehive_t unreserved_port_t:tcp_socket name_connect;

#!!!! This avc can be allowed using the boolean 'global_ssp'
allow thehive_t urandom_device_t:chr_file { getattr open read };
allow thehive_t user_home_dir_t:dir search;
allow thehive_t user_runtime_root_t:dir getattr;
allow thehive_t user_runtime_t:dir getattr;
allow thehive_t usr_t:dir read;
allow thehive_t usr_t:lnk_file read;
allow thehive_t var_log_t:file open;